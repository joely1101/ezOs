#!/bin/bash
Version="v2021-06-11"
MYNAME=`whoami`
SUFFIX=osconfig
get_dir()
{
    if [ -L $0 ];then
        src_dir=`readlink $0 | xargs dirname`
    else
	      src_dir=`realpath $0 | xargs dirname`
    fi
    config_dir=$src_dir/configs
}
get_dir

if [ ! -f  $src_dir/scripts/cmd.head.sh ] || [ ! -f  $src_dir/scripts/cmd.tail.sh ];then
    echo "cmd.head.sh or cmd.tail.sh not found"
    exit 99
fi

. $src_dir/scripts/cmd.head.sh
##local function#####
env_check()
{
    if [ "$MYNAME" = "root" ];then
        echo "Please run as non root user"
        exit 0
    fi
    if [ -f /.dockerenv ];then
        echo "please run on host OS"
        exit 0
    fi
 
    docker -v &>/dev/null
    if [ "$?" != "0" ];then
        echo "docker is nit install, please install by run 'sudo InstallDocker.sh'"
        echo "Or refrernce to https://docs.docker.com/install/linux/docker-ce/ubuntu/ to install docker"
        exit 0
    fi
}

instance_not_exist()
{
    XX=`docker ps -a -q -f name=$1`
    if [ "$XX" = "" ];then
      #echo "dkos $ins_name is already exist"
      return 0
    fi
    return 1
}
image_not_exist()
{
   hd_ins=`docker image ls $image_base -q`
   if [ "$hd_ins" = "" ];then
     return 0
   fi
   return 1

}
load_config()
{
    local lerror=0
    if [ -z $1 ];then
	    error_out "error project name"
    fi
    
    if [ "$config_loaded" = "1" ];then
	    return
    fi

    local config=${config_dir}/${1}.${SUFFIX}
    if [ ! -f $config ];then
	    error_out "config file not found"
    fi
    . $config
    if [ -z $OS_name ];then
      OS_name=${1}
	    echo "Warning:OS_name not found,use file name"
    fi
    if [ -z $OS_image ];then
      echo "Error:OS_image not found"
      lerror=1
    fi
    [ $lerror -eq 1 ] && error_out "config file parameter error"
    config_loaded=1

}
create_docker_os()
{
    local pro=$1
    load_config $pro

    if image_not_exist $OS_image ;then
        docker pull $OS_image
    fi
    if instance_not_exist $OS_name ;then
        VOPTION=""
        VOPTION+=" -v /etc/passwd:/etc/passwd:ro -v /etc/shadow:/etc/shadow:ro -v /etc/group:/etc/group:ro"
        VOPTION+=" -v$HOME:$HOME"
        VOPTION+=" --restart=always"
        VOPTION+=" $OS_extra_opt"
	#echo "docker run -idt --hostname $EZBV_name --name $EZBV_name $VOPTION $EZBV_image"
        docker run -idt --hostname $OS_name --name $OS_name $VOPTION $OS_image
    else
	    echo "$EZBV_name already exist!! Continue......"
    fi

}
##############################init###############################################
env_check
##########################MAIN cmd function#######################################
cmd_version()
{
    echo "=========Last commit==============="
    git -C "$EZBV_config_dir" log -1
    echo "=========version: $Version==============="
}
help_add "version" "version - show version."
cmd_update()
{
    local pro=$1
    git -C $src_dir pull 
    if [ -z "$pro" ];then
        echo "update list success."
        exit 0
    fi
    load_config $pro
    docker stop $OS_name &>/dev/null
    docker rm $OS_name &>/dev/null
    docker pull $OS_image
    echo "update $pro done.Please login $pro again to take effect!!"
}
help_add "update" "update osname - update OS's config/image"

cmd_ls()
{
    osname=$1
    file=${config_dir}/${osname}.${SUFFIX}
    if [ -f $file ];then
        echo "==================================="
    		echo "$name"
    		cat $file
        return
    fi
    
    detail=$1
    lists=`ls ${config_dir}/*.${SUFFIX}`
    for list in $lists;do
	    name=`basename $list | cut -f1 -d "."`
    	if [ ! -z $detail ];then
    		echo "==================================="
    		echo "$name"
    		cat $list
    	else
    		echo "$name"
    	fi
    done
}
help_add "list" "ls [ osname ] - list supported OS"

cmd_del()
{
    local pro=$1
    load_config $pro
    docker stop $OS_name &>/dev/null
    docker rm $OS_name &>/dev/null
    echo "Delete $pro finish!!"
}
help_add "del" "del osname - del running os."
cmd_login()
{
    local pro=$1
    load_config $pro
    
    #create os first.
    create_docker_os $pro
    
    if [ "$OS_islinux32" != "" ];then
	    dolinux32=linux32
    else
	    dolinux32=
    fi

    local ins_name=$OS_name
    if [ "$ins_name" = "" ];then
        error_out "OS_NAME is empty!!"
    fi
    if [ ! -z $OS_shell ];then
	    myshell=$OS_shell
    else
	    if docker exec -it $ins_name ls /bin/bash &>/dev/null ;then
	        myshell="/bin/bash"
	    elif docker exec -it $ins_name ls /bin/ash  &>/dev/null ;then
	        myshell="/bin/ash"
	    else
	        myshell="/bin/sh"
	    fi
    fi
    if [ "$2" = "root" ] ;then
        echo "login $ins_name as root"
        docker exec -it $ins_name  $dolinux32 $myshell

        #eval "docker exec -it $ins_name $dolinux32 $myshell -c '$extra_cmd cd $PWD&&su -s $myshell root'"
    else
        MTNAME=`whoami`
        shift 1
        if [ "$1" != "" ];then
            extra_cmd="$@;"
        fi

        #docker exec -it $ins_name su - $MYNAME
        #echo "docker exec -it $ins_name /bin/sh -c 'cd $PWD&&su $MYNAME'"

        echo "login $ins_name as $MYNAME"
        eval "docker exec -it $ins_name $dolinux32 $myshell -c '$extra_cmd cd $PWD&&su -s $myshell $MYNAME'"

    fi
}
help_add "login" "login osname - login os."

cmd_save()
{
    local pro=$1
    local pushnow=$2
    create_docker_os $pro

    if [ "$OS_image" = "" ];then
        echo "error parameter"
        return
    fi    
    
    echo "Image save to $EZBV_image"
    docker commit $OS_name $OS_image
    if [ ! -z "$pushnow" ];then
        echo "Push docker image $OS_image"
        docker push $OS_image
    fi
}
help_add "save" "save osname [ pushnow ]- save os and push to docker registy"

cmd_push()
{
    local pro=$1

    create_docker_os $pro

    if [ "$2" != "" ];then
        OS_image=$2
    fi

    if [ "$EZBV_name" = "" ];then
        echo "error parameter"
        return
    fi    
    
    echo "Image save to $EZBV_image"
    docker commit $OS_name $OS_image
    if [ ! -z "$pushnow" ];then
        echo "Push docker image $OS_image"
        docker push $OS_image
    fi
}
#all use simple help.
rename_fn help_show old_help_show

help_show()
{
    echo "Valid argument:"
    echo "  version - show version"
    echo "  ls [ osname ] - list supported OS"
    echo "  update osname - update OS's config/image"
    echo "  login osname [ root ]  - login OS "
}
cmd_help()
{
  help_show
}
help_add "help" "help - show commands"

cmd_help2()
{
   old_help_show
}
help_add "help2" "help2 - show all help"


help_add "push" "push osname - push to docker registry"

. $src_dir/scripts/cmd.tail.sh

